{{#if backend.express}}
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
{{#if database.prisma}}
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
{{/if}}
{{#if database.mongoose}}
const User = require('../models/User');
{{/if}}

const router = express.Router();

// Register
router.post('/register', async (req, res) => {
  try {
    const { email, password, name } = req.body;

    // Check if user exists
    {{#if database.prisma}}
    const existingUser = await prisma.user.findUnique({ where: { email } });
    {{/if}}
    {{#if database.mongoose}}
    const existingUser = await User.findOne({ email });
    {{/if}}
    
    if (existingUser) {
      return res.status(400).json({ message: 'User already exists' });
    }

    // Hash password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // Create user
    {{#if database.prisma}}
    const user = await prisma.user.create({
      data: { email, password: hashedPassword, name }
    });
    {{/if}}
    {{#if database.mongoose}}
    const user = new User({ email, password: hashedPassword, name });
    await user.save();
    {{/if}}

    // Generate token
    const token = jwt.sign(
      { id: user.id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.status(201).json({
      token,
      user: {
        id: user.id,
        email: user.email,
        name: user.name
      }
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
});

// Login
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    // Find user
    {{#if database.prisma}}
    const user = await prisma.user.findUnique({ where: { email } });
    {{/if}}
    {{#if database.mongoose}}
    const user = await User.findOne({ email });
    {{/if}}

    if (!user) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }

    // Check password
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }

    // Generate token
    const token = jwt.sign(
      { id: user.id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.json({
      token,
      user: {
        id: user.id,
        email: user.email,
        name: user.name
      }
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
});

module.exports = router;
{{/if}}

{{#if backend.nestjs}}
import { Controller, Post, Body, UnauthorizedException } from '@nestjs/common';
import { AuthService } from './auth.service';
import * as bcrypt from 'bcryptjs';

@Controller('auth')
export class AuthController {
  constructor(private authService: AuthService) {}

  @Post('register')
  async register(@Body() body: { email: string; password: string; name: string }) {
    const { email, password, name } = body;
    
    // Hash password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // Create user logic here
    const user = { id: 1, email, name }; // Replace with actual user creation

    const token = await this.authService.generateToken({ id: user.id, email: user.email });

    return {
      token,
      user: {
        id: user.id,
        email: user.email,
        name: user.name
      }
    };
  }

  @Post('login')
  async login(@Body() body: { email: string; password: string }) {
    const { email, password } = body;

    // Find user logic here
    const user = { id: 1, email, password: 'hashedPassword' }; // Replace with actual user lookup

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      throw new UnauthorizedException('Invalid credentials');
    }

    const token = await this.authService.generateToken({ id: user.id, email: user.email });

    return {
      token,
      user: {
        id: user.id,
        email: user.email
      }
    };
  }
}
{{/if}}
